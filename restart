#!/bin/bash
# Server information stored in ~/.config/restart/restartrc:
config="$HOME/.config/restart/restartrc"

[[ ! -f "$config" ]] && mkdir -p "${config%\/*}" && touch "$config" && \
  printf '#\n# Enter server info:\n#\n# servername=<servername>\n# server=<server url>\n# sshport=<sshport - cannot be blank>\n\n# If your server port is 22 find out why it should not be and change it.\n' |tee "$config" && \
  printf 'Edit config file before rerunning.' && \
  exit

scriptname=$(realpath "$0")

#Functions
function error(){
 #read -p "$*"
 printf "Recognized commands are: \nabs \nalsa \napache[2] \naudiobookshelf \nbind[9] \nchrome \ndeluge-gtk \ndeluge[d] \ndocker \nedit \ngig[abyte] \nice[cast][2] \njelly[fin] \nminidlna (restart, force-reload, rescan) \nmpd \nnetwork/networking/network manager \nnfs \nnginx/ngnix \nnow \npicard \npipe(wire) \npulse(audio) \nserviio \nshout \nssh[d] \nsystemd \n\n"
 echo "Edit this script in nano, code, or quit?"
 select ncq in "nano" "code" "quit"; do
   case "$ncq" in
	nano ) nano "$scriptname" ; break;;
	code ) code "$scriptname" ; break;;
	quit ) echo "Done." ; break;;
   esac
 done
}


function editscript(){
if [[ "$1" == "edit" ]]; then
 (/usr/bin/nano "$scriptname")
 exit
fi
}

remotefn() {
[[ "$(uname -n)" != "$servername" ]] && REMOTE="ssh -p $sshport $server"
#printf '\nssh server name: %s\nssh server port: %s\n        ssh url: %s\n  REMOTE PREFIX: %s\n\n\n' "$servername" "$sshport" "$server" "$REMOTE"
}

editscript "$1"


. "$config"

[[ "$(uname -n)" != "$servername" ]] && REMOTE="ssh -p $sshport $server"


[[ "$#" -eq 0 ]] &&  error

##G
# restart gigabyte
[[ "$1" =~ ^(gig|gigabyte)$ ]] && ${REMOTE:-} sudo reboot now && wall "System will be shutting down forthwith..." && exit

##A
if [ "$1" = "alsa" ]; then
 sudo /etc/init.d/alsa-utils restart
 sudo alsa force-reload
 sudo /etc/init.d/alsa-utils status

elif [[ "$1" = "apache" ]] || [[ "$1" = "apache2" ]]; then
 sudo systemctl restart apache2
 systemctl status apache2

elif [[ "$1" == "audio" ]] || [[ "$1" == "audiobookshelf" ]] || [[ "$1" == "abs" ]]; then
# remotefn && ${REMOTE:-} sudo systemctl restart audiobookshelf; status audiobookshelf
remotefn
${REMOTE:-} docker compose -f ~/bin/docker/audiobookshelf/compose.yaml down && ${REMOTE:-} docker compose -f ~/bin/docker/audiobookshelf/compose.yaml pull && ${REMOTE:-} docker compose -f ~/bin/docker/audiobookshelf/compose.yaml up -d; status audiobookshelf

# ssh -p "$sshport" "$server" systemctl status audiobookshelf

##B
elif [ "$1" = "bind" ] || [ "$1" = "bind9" ]; then
 sudo systemctl restart bind9.service
 /bin/sleep 3
 systemctl status bind9.service

##C
elif [ "$1" = "chrome" ] ; then
/usr/bin/pkill --oldest --signal TERM -f chrome
#if $( ps -A|grep chrome )
while [[ $(ps -A|grep -c chrome) -gt 0 ]] && [[ "$n" -lt 7 ]]; do printf "...chrome still shittig down..." && \sleep 5s; done
nohup google-chrome


##D

elif [ "$1" = "docker" ] || [ "$1" = "dockerd" ]; then
 sudo /usr/bin/systemctl restart docker; docker start picard

#elif [ "$1" = "docker" ]; then
# echo "docker:  restart or stop-start Picard?"
# select rfs in "restart" "picard" ; do
#   case "$rfs" in
#	restart ) sudo /usr/bin/systemctl restart docker ; docker start picard; break ;;
#	picard ) docker stop picard; docker start picard ; break ;;
##	force-reload ) ls -alF /var/lib/minidlna/files.db; sudo systemctl force-reload minidlna ; systemctl status minidlna; ls -alF /var/lib/minidlna/files.db; break ;;
##        scan ) sudo minidlnad -r;  break ;;
#   esac


elif [[ "$1" = "deluge-gtk" ]]; then
pkill -9 deluge-gtk
deluge-gtk &!

elif [ "$1" = "deluge" ] || [ "$1" = "deluged" ]; then
 sudo systemctl restart deluged
# sudo pkill -9 deluged
# screen sudo -u deluge -g media deluged -d -c /var/lib/deluged/config -l /var/log/deluged/daemon.log -L debug
# sudo systemctl start deluged
 systemctl status deluged
 sudo ps -A |grep deluged

#elif [ "$1" = "deluge" ] || [ "$1" = "deluged" ]; then
## sudo systemctl stop deluged
# sudo pkill -9 deluged
# screen sudo -u deluge -g media deluged -d -c /var/lib/deluged/config -l /var/log/deluged/daemon.log -L debug
## sudo systemctl start deluged
# sudo ps -A |grep deluged

##E
elif [ "$1" = "edit" ]; then
 nano "$HOME"/bin/restart

##G
#elif [[ "$1" =~ ^(gig|gigabyte)$ ]]
# then
#   echo sudo reboot now

##I
elif [[ "$1" =~ ^(ice|icecast|icecast2)$ ]]
 then
   ${REMOTE:-} sudo systemctl restart icecast2.service
   status icecast2
   restart mpd
   play

#echo yes
#elif [[ "$1" == "ice" ]] || [[ "$1" == "icecast" ]] || [[ "$1" == "icecast2" ]];
#then

##J
elif [[ "$1" == "jelly" ]] || [[ "$1" == "jellyfin" ]]; then ssh 192.168.1.2:"$HOME"/bin/restart jellyfin


##M
elif [ "$1" = "minidlna" ]; then
 echo "minidlna:  restart or force-reload?"
 select rfs in "restart" "force-reload" "scan"; do
   case "$rfs" in
	restart ) sudo systemctl restart minidlna ; systemctl status minidlna; break ;;
	force-reload ) ls -alF /var/lib/minidlna/files.db; sudo systemctl force-reload minidlna ; systemctl status minidlna; ls -alF /var/lib/minidlna/files.db; break ;;
        scan ) sudo minidlnad -r;  break ;;
   esac
 done

elif [ "$1" = "mpd" ]; then
 ${REMOTE:-} sudo systemctl restart mpd
 ${REMOTE:-} systemctl status mpd

##N
#elif [ "$1" = "network" ] || [ "$1" = "networking" ] || [ "$1" = "network manager" ]; then sudo systemctl restart network-manager.service
elif [ "$1" = "net" ] || [ "$1" = "network" ] || [ "$1" = "networking" ] || [ "$1" = "network manager" ]; then
  screen bash -c 'sudo nmcli networking off; /usr/bin/sleep 1s; sudo nmcli networking on; exit'

elif [ "$1" = "nfs" ]; then
     if ! [[ -d /dev/shm/cache ]]
     then
        mkdir /dev/shm/cache
        chown "$USER":media /dev/shm/cache
     fi
 sudo systemctl daemon-reload
 sudo systemctl restart nfs-kernel-server
 sudo systemctl status nfs-kernel-server
# sudo /etc/init.d/nfs-kernel-server restart

elif [ "$1" = "nginx" ] || [ "$1" = "ngnix" ]; then
     sudo systemctl restart nginx
     systemctl status nginx

elif [[ "$1" = "now" ]] || [[ "$1" == "$(uname -n)" ]]; then
 sudo reboot now

##P

elif [[ "$1" = "picard" ]]; then
 docker stop picard
 docker start picard

elif [[ "$1" = "pipe" ]] || [[ "$1" = "pipewire" ]] || [[ "$1" = "pipewire-pulseaudio" ]]; then
 /usr/bin/systemctl --user restart pipewire
 /usr/bin/systemctl --user status pipewire


elif [ "$1" = "pulse" ] || [ "$1" = "pulseaudio" ] || [ "$1" = "pulse-audio" ]; then
 sudo killall pulseaudio
 pulseaudio -k
 pulseaudio --start

##S
elif [ "$1" = "serviio" ]; then
 sudo systemctl stop serviio.service
 sudo systemctl start serviio.service
 sudo systemctl status serviio.service

elif [ "$1" = "shout" ]; then #https://www.howtoforge.com/tutorial/ubuntu-shoutcast-server/
# echo "Attempting 'sudo killall sc_serv && sudo sc_serv &,' if it doesn't work try restarting mpd.  See also (https://www.howtoforge.com/tutorial/ubuntu-shoutcast-server/): "
# sudo killall sc_serv && sudo sc_serv &
 printf "There is no shoutcast server on this machine; restarting icecast server instead!"
 sudo systemctl restart icecast2.service #restart mpd

elif [[ "$1" = "sshd" ]] || [[ "$1" = "ssh" ]]; then
 sudo systemctl restart sshd.service
 sudo systemctl status sshd.service
 sudo systemctl restart ssh.service
 sudo systemctl status ssh.service

elif [[ "$1" == "systemd" ]] || [[ "$1" == "systemctl" ]]; then
 sudo systemctl daemon-reload

else
  printf "Command not found!\n"
  error
# #echo "Recognized commands are alsa, shout, deluge(d), minidlna (restart or force-reload), network/networking/network manager, nfs, now, pulse(audio)..."
# #echo "Edit this script in nano, code, or quit?"
# #select ncq in "nano" "code" "quit"; do
# #  case $ncq in
##	nano ) nano "$HOME"/bin/restart ; break;;
##	code ) code "$HOME"/bin/restart ; break;;
##	quit ) echo "Done." ; break;;
# #  esac
# #done
fi

