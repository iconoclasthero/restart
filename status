#!/bin/bash

scriptname=$(realpath "$0")

#Functions
function error(){
 #read -p "$*"
 printf "Recognized commands are: \nalsa \nbind[9] \nchrome \ndeluge[d] \ndocker \nedit \nice[cast][2] \nminidlna (restart, force-reload, rescan) \nmpd \nnetwork/networking/network manager \nnfs \nnow \npipe(wire) \npulse(audio) \nserviio \nshout \nssh[d] \n\n"
 echo "Edit this script in nano, code, or quit?"
 select ncq in "nano" "code" "quit"; do
   case "$ncq" in
	nano ) nano /home/bvargo/bin/restart ; break;;
	code ) code /home/bvargo/bin/restart ; break;;
	quit ) echo "Done." ; break;;
   esac
 done
}


function editscript(){
if [[ "$1" == "edit" ]]; then
 (/usr/bin/nano "$scriptname")
 exit
fi
}

editscript "$1"

if [ "$#" -eq 0 ]; then
 error

 ##A
elif [ "$1" = "alsa" ]; then
# sudo /etc/init.d/alsa-utils restart
# sudo alsa force-reload
 sudo /etc/init.d/alsa-utils status

##B
elif [ "$1" = "bind" ] || [ "$1" = "bind9" ]; then
# sudo systemctl restart bind9.service
# /bin/sleep 3
 systemctl status bind9.service

##C
elif [ "$1" = "chrome" ] ; then
#pkill chrome
sudo ps -A|grep chrome

##D

elif [ "$1" = "docker" ] || [ "$1" = "dockerd" ]; then
 #sudo /usr/bin/systemctl restart docker
 sudo /usr/bin/systemctl status docker


elif [ "$1" = "deluge" ] || [ "$1" = "deluged" ]; then
# sudo systemctl status deluged
 systemctl status deluged
 sudo ps -A |grep deluged

#elif [ "$1" = "deluge" ] || [ "$1" = "deluged" ]; then
## sudo systemctl stop deluged
# sudo pkill -9 deluged
# screen sudo -u deluge -g media deluged -d -c /var/lib/deluged/config -l /var/log/deluged/daemon.log -L debug
## sudo systemctl start deluged
# sudo ps -A |grep deluged

##E
elif [ "$1" = "edit" ]; then
 nano /home/bvargo/bin/status

##I
elif [[ "$1" = "ice" ]] || [[ "$1" =~ "icecast" ]]; then
  systemctl status icecast
  systemctl status mpd
#sudo systemctl status icecast2.service; systemctl status icecast2.service #; status mpd
#elif [ "$1" = "icecast" ]; then sudo systemctl status icecast2.service; systemctl status icecast2.service; status mpd
#elif [ "$1" = "icecast2" ]; then sudo systemctl status icecast2.service; systemctl status icecast2.service; status mpd


##M
elif [ "$1" = "minidlna" ]; then
 echo "minidlna: status  restart, force-reload, scan?"
 select rfs in "status" "restart" "force-reload" "scan"; do
   case "$rfsc" in
	status ) systemctl status minidlna; break ;;
	restart ) sudo systemctl restart minidlna ; systemctl status minidlna; break ;;
	force-reload ) ls -alF /var/lib/minidlna/files.db; sudo systemctl force-reload minidlna ; systemctl status minidlna; ls -alF /var/lib/minidlna/files.db; break ;;
        scan ) sudo minidlnad -r;  break ;;
   esac
 done

elif [ "$1" = "mpd" ]; then
# sudo systemctl status mpd ;
systemctl status mpd

##N
#elif [ "$1" = "network" ] || [ "$1" = "networking" ] || [ "$1" = "network manager" ]; then sudo systemctl status network-manager.service
#elif [ "$1" = "net" ] || [ "$1" = "network" ] || [ "$1" = "networking" ] || [ "$1" = "network manager" ]; then screen bash -c 'sudo nmcli networking off; /usr/bin/sleep 1s; sudo nmcli networking on; exit'

elif [ "$1" = "nfs" ]; then
#     if ! [[ -d /dev/shm/cache ]]
#     then
#        mkdir /dev/shm/cache
#        chown bvargo:media /dev/shm/cache
#     fi
# sudo systemctl daemon-reload
# sudo systemctl status nfs-kernel-server
 sudo systemctl status nfs-kernel-server
 printf "$ ls -ltr /dev/shm/cache: \n"
 ls -ltr /dev/shm/cache
# sudo /etc/init.d/nfs-kernel-server status

#elif [ "$1" = "now" ]; then
# sudo reboot now

##P
elif [ "$1" = "pipe" ] || [ "$1" = "pipewire" ] || [ "$1" = "pipewire-pulseaudio" ]; then
 /usr/bin/systemctl --user status pipewire

elif [ "$1" = "pulse" ] || [ "$1" = "pulseaudio" ] || [ "$1" = "pulse-audio" ]; then
# sudo killall pulseaudio
# pulseaudio -k
# pulseaudio --start
 pulseaudio --check

##S
elif [ "$1" = "serviio" ]; then
# sudo systemctl stop serviio.service
# sudo systemctl start serviio.service
 sudo systemctl status serviio.service

elif [ "$1" = "shout" ]; then #https://www.howtoforge.com/tutorial/ubuntu-shoutcast-server/
# echo "Attempting 'sudo killall sc_serv && sudo sc_serv &,' if it doesn't work try statusing mpd.  See also (https://www.howtoforge.com/tutorial/ubuntu-shoutcast-server/): "
# sudo killall sc_serv && sudo sc_serv &
 printf "There is no shoutcast server on this machine; status of icecast server instead!"
 systemctl status icecast2.service
# sudo systemctl status icecast2.service #status mpd

elif [ "$1" = "sshd" ] || [ "$1" = "ssh" ]; then
# sudo systemctl status sshd.service
 sudo systemctl status sshd.service
# sudo systemctl status ssh.service
 sudo systemctl status ssh.service

else
 printf "Command not found!\n"
 error
# #echo "Recognized commands are alsa, shout, deluge(d), minidlna (status or force-reload), network/networking/network manager, nfs, now, pulse(audio)..."
# #echo "Edit this script in nano, code, or quit?"
# #select ncq in "nano" "code" "quit"; do
# #  case $ncq in
##	nano ) nano /home/bvargo/bin/status ; break;;
##	code ) code /home/bvargo/bin/status ; break;;
##	quit ) echo "Done." ; break;;
# #  esac
# #done
fi
